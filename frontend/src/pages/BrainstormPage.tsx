import React, { useState } from 'react';

export default function BrainstormPage() {
  const [selectedTable, setSelectedTable] = useState('characters');
  const [selectedRows, setSelectedRows] = useState<number[]>([1, 2]);
  const [selectedBuckets, setSelectedBuckets] = useState<string[]>(['books', 'scripts']);
  const [tone, setTone] = useState('cheesy-romcom');
  const [easterEgg, setEasterEgg] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState('');

  const tables = ['characters', 'scenes', 'plot_points'];
  const buckets = [
    { name: 'books', active: true, docCount: 23 },
    { name: 'scripts', active: true, docCount: 15 },
    { name: 'plays', active: false, docCount: 8 }
  ];

  const tones = [
    'neutral', 'cheesy-romcom', 'romantic-dramedy', 
    'shakespearean-romance', 'professional', 'academic'
  ];

  const handleGenerate = async () => {
    setIsGenerating(true);
    
    // Mock generation delay
    setTimeout(() => {
      setGeneratedContent(`
        BRAINSTORM SESSION - Version 3
        Generated from: ${selectedTable} (rows: ${selectedRows.join(', ')})
        Using buckets: ${selectedBuckets.join(', ')}
        Tone: ${tone}
        
        Based on your character profiles and the romantic comedy conventions from our source material, here are some fresh ideas for your story:
        
        **Character Dynamics:**
        The tension between your main characters could be enhanced by giving them conflicting goals that mirror classic romantic comedy tropes, but with a modern twist...
        
        **Plot Development:**
        Consider the "meet-cute" scenario where circumstances force them together despite their initial resistance. The bookstore setting provides rich opportunities for literary references and intellectual sparring...
        
        **Dialogue Style:**
        Drawing from the witty banter patterns in our script references, focus on subtext and verbal fencing that reveals character while advancing the romantic tension...
        
        [This would be much longer and more detailed in the real system, generated by your LightRAG buckets and GPT-4o]
      `);
      setIsGenerating(false);
    }, 2000);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-2xl font-bold text-gray-900">Brainstorm</h1>
          <p className="text-gray-600 mt-1">Generate ideas using your project data and knowledge buckets</p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Configuration Panel */}
          <div className="lg:col-span-1 space-y-6">
            {/* Source Table Selection */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Source Data</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Table
                  </label>
                  <select
                    value={selectedTable}
                    onChange={(e) => setSelectedTable(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {tables.map((table) => (
                      <option key={table} value={table}>{table}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Selected Rows
                  </label>
                  <div className="text-sm text-gray-600">
                    Rows: {selectedRows.join(', ')} (3 selected)
                  </div>
                </div>
              </div>
            </div>

            {/* Bucket Selection */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Knowledge Buckets</h3>
              
              <div className="space-y-3">
                {buckets.map((bucket) => (
                  <label key={bucket.name} className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={selectedBuckets.includes(bucket.name)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedBuckets([...selectedBuckets, bucket.name]);
                        } else {
                          setSelectedBuckets(selectedBuckets.filter(b => b !== bucket.name));
                        }
                      }}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <div className="flex-1">
                      <div className="font-medium text-gray-900">{bucket.name}</div>
                      <div className="text-sm text-gray-500">
                        {bucket.docCount} documents â€¢ {bucket.active ? 'Active' : 'Inactive'}
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            {/* Tone & Style */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Style</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Tone
                  </label>
                  <select
                    value={tone}
                    onChange={(e) => setTone(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {tones.map((t) => (
                      <option key={t} value={t}>{t}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Easter Egg (Optional)
                  </label>
                  <input
                    type="text"
                    value={easterEgg}
                    onChange={(e) => setEasterEgg(e.target.value)}
                    placeholder="Add a creative twist..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
              
              <button
                onClick={handleGenerate}
                disabled={isGenerating || selectedBuckets.length === 0}
                className="w-full mt-6 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-semibold py-3 px-4 rounded-lg transition-colors"
              >
                {isGenerating ? 'Generating...' : 'Generate Brainstorm'}
              </button>
            </div>
          </div>

          {/* Results Panel */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 h-full">
              <div className="px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">Generated Ideas</h3>
                <p className="text-sm text-gray-500 mt-1">
                  {generatedContent ? 'Latest brainstorm session' : 'Configure settings and click Generate to start brainstorming'}
                </p>
              </div>
              
              <div className="p-6">
                {isGenerating ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <span className="ml-3 text-gray-600">Generating ideas...</span>
                  </div>
                ) : generatedContent ? (
                  <div className="prose max-w-none">
                    <pre className="whitespace-pre-wrap text-gray-700 font-sans leading-relaxed">
                      {generatedContent}
                    </pre>
                  </div>
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    <svg className="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                    </svg>
                    <p>Your brainstormed ideas will appear here</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
